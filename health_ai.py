# -*- coding: utf-8 -*-
"""Health AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jyLVAmcegMh2RH_DpDRH6wKU3BNqeZ2K
"""

# Full enhanced Health AI with multiple stylish login pages + many new features
import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import random
from datetime import datetime, timedelta

# ---------------- Model Load ---------------- #
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# ---------------- Helper: LLM Generation ---------------- #
def generate_response(prompt, max_length=900):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            top_p=0.9,
            pad_token_id=tokenizer.eos_token_id,
            eos_token_id=tokenizer.eos_token_id,
            num_return_sequences=1
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    # remove any echo of prompt if present
    if response.startswith(prompt):
        response = response[len(prompt):].strip()
    return response.strip()

# ---------------- Utility: Random Daily Tips ---------------- #
DAILY_TIPS = [
    "💧 Drink at least 2–3 liters of water daily to stay hydrated.",
    "🍎 Add one fruit rich in vitamin C to your daily diet to boost immunity.",
    "🧘 Practice 5 minutes of deep breathing or mindfulness every morning.",
    "🚶‍♂️ Take a 20-minute walk daily to help circulation and mood.",
    "😴 Keep a consistent sleep schedule — aim for 7-8 hours nightly."
]
def get_daily_tip():
    return random.choice(DAILY_TIPS)

# ---------------- Rule-based Emergency Checker ---------------- #
EMERGENCY_KEYWORDS = [
    "chest pain", "breathing difficulty", "severe bleeding", "unconscious",
    "sudden weakness", "sudden numbness", "slurred speech", "severe burn", "high fever with seizure"
]
def check_emergency_from_text(text):
    t = text.lower()
    for kw in EMERGENCY_KEYWORDS:
        if kw in t:
            return True, kw
    return False, None

# ---------------- Feature: Disease Prediction ---------------- #
def disease_prediction(symptoms):
    # rule emergency check first
    is_emergency, matched = check_emergency_from_text(symptoms)
    prompt = f"""
You are a clear, concise medical-assistant. Analyze the user's symptoms and provide:
1) A short list (3 max) of possible medical conditions (one-line each).
2) An estimated severity level for each condition (Mild / Moderate / Severe).
3) Practical first-aid or home remedies where appropriate (natural tips).
4) When to urgently seek emergency care (clear bullet points).
Keep answers simple and friendly. Use plain-language recommendations.
Symptoms: {symptoms}

IMPORTANT: This is informational only. Advise consulting a healthcare professional.
"""
    response = generate_response(prompt, max_length=900)
    if is_emergency:
        emergency_banner = ("🚨 EMERGENCY ALERT — possible critical symptom detected: "
                           f"'{matched}'. Seek immediate medical attention or call emergency services.\n\n")
        response = emergency_banner + response
    return response

# ---------------- Feature: Treatment Plan ---------------- #
def treatment_plan(condition, age, gender, medical_history):
    prompt = f"""
You are a compassionate medical assistant. Create a personalized, easy-to-follow treatment plan.
Include: short explanation of the condition, suggested home remedies, general medication categories (do NOT prescribe specific dosages), lifestyle changes, red flags (when to see doctor), and follow-up suggestions.

Patient details:
- Condition: {condition}
- Age: {age}
- Gender: {gender}
- Medical history: {medical_history}

IMPORTANT: This is informational only.
"""
    return generate_response(prompt, max_length=1000)

# ---------------- Feature: General Chat ---------------- #
def health_chat(user_input):
    prompt = f"""
You are a helpful friendly medical assistant. Answer the question clearly in simple language and include one natural/home tip if relevant.

Q: {user_input}

Answer:
"""
    return generate_response(prompt, max_length=700)

# ---------------- Feature: Natural Remedies ---------------- #
# We'll combine a quick rule-based fallback for common conditions plus LLM augmentation.
COMMON_REMEDIES = {
    "fever": "Drink warm fluids (hot water, ginger tea), rest, wear light clothing, keep room ventilated, sponge with lukewarm water if uncomfortable.",
    "cold": "Steam inhalation, warm honey-lemon water, saline nasal drops, rest and stay hydrated.",
    "headache": "Hydrate, rest in a quiet/dark room, apply cool compress to forehead, try gentle neck stretches.",
    "sore throat": "Gargle warm salt water, drink warm turmeric milk or honey-lemon, rest your voice.",
    "diarrhea": "Oral rehydration (water with salt & sugar), BRAT diet (banana, rice, apple sauce, toast), avoid dairy for short time."
}
def natural_remedies(condition_input):
    cond = condition_input.strip().lower()
    # check if any known keyword present
    for k, v in COMMON_REMEDIES.items():
        if k in cond:
            base = f"Natural/Home remedies for {k.capitalize()}:\n{v}"
            # ask LLM to expand briefly with caution
            prompt = f"{base}\n\nAdd two safe additional home-care tips and include a short 'when to see a doctor' note."
            extra = generate_response(prompt, max_length=400)
            return base + "\n\n" + extra
    # fallback to LLM if not in common list
    prompt = f"Give safe and simple natural/home remedies and when-to-see-doctor notes for: {condition_input}."
    return generate_response(prompt, max_length=600)

# ---------------- Feature: Diet Suggestions ---------------- #
def diet_suggestions(condition_input):
    prompt = f"""
You are a nutrition assistant. For the condition: {condition_input}, provide:
1) Foods to prefer (3-6 items) with short reasons.
2) Foods to avoid (3-6 items) with short reasons.
3) One sample day meal plan (breakfast, lunch, dinner, 1 snack).
Keep it simple, culturally neutral, and safe. Mention 'consult dietitian/doctor' reminder.
"""
    return generate_response(prompt, max_length=700)

# ---------------- Feature: Yoga / Exercise Suggestions ---------------- #
def exercise_suggestions(condition_input):
    prompt = f"""
You are a gentle wellness coach. For the condition: {condition_input}, suggest:
- 3 simple exercises/yoga poses (name + 1-line benefit + safety note).
- How many repetitions/duration (simple safe guidance).
Include contraindications (when NOT to do them).
"""
    return generate_response(prompt, max_length=600)

# ---------------- Feature: Emergency Step-by-step Advice ---------------- #
def emergency_steps(symptom_text):
    prompt = f"""
User reports: {symptom_text}
Provide a clear numbered step-by-step emergency checklist applicable for laypersons (what to do immediately), plus when to call emergency services, and what information to prepare for the responder.
Keep instructions concise.
"""
    return generate_response(prompt, max_length=600)

# ---------------- Feature: Medicine Reminder Simulation ---------------- #
# Input format: simple free text list of medicines + times OR structured fields below
def medicine_reminder_freeform(meds_text):
    """
    Expecting lines like:
    Paracetamol - 500 mg - 8:00, 14:00
    Vitamin D - 1 tab - Morning
    """
    lines = [l.strip() for l in meds_text.splitlines() if l.strip()]
    schedule_entries = []
    for ln in lines:
        schedule_entries.append(ln)
    if not schedule_entries:
        return "No medicines entered. Provide each medicine on new line with optional times, e.g. 'Paracetamol - 500mg - 08:00, 14:00'."
    # Create a simple schedule output and a friendly routine suggestion
    out = "🗓️ Medicine Schedule (simulation):\n"
    for s in schedule_entries:
        out += f"- {s}\n"
    out += "\nTip: Set alarms on your phone or use a pillbox to keep track. Consult pharmacist/doctor for exact dosages & interactions."
    return out

# ---------------- Feature: Wellness Tracker (vitals analysis) ---------------- #
def wellness_tracker(temp_c=None, bp_sys=None, bp_dia=None, hr=None, spo2=None, glucose=None, notes=""):
    # Build quick rule-based flags
    flags = []
    try:
        if temp_c is not None:
            temp = float(temp_c)
            if temp >= 39.0:
                flags.append("High fever (≥39°C) — seek prompt medical care.")
            elif temp >= 38.0:
                flags.append("Fever (≥38°C) — rest, hydrate; monitor.")
    except:
        pass
    try:
        if bp_sys is not None and bp_dia is not None:
            s = float(bp_sys); d = float(bp_dia)
            if s >= 180 or d >= 120:
                flags.append("Hypertensive crisis — seek emergency care now.")
            elif s >= 140 or d >= 90:
                flags.append("High blood pressure — lifestyle measures and consult doctor.")
    except:
        pass
    try:
        if hr is not None:
            hrv = float(hr)
            if hrv >= 130:
                flags.append("Very high heart rate — seek medical assessment.")
            elif hrv <= 40:
                flags.append("Low heart rate — consult physician if symptomatic.")
    except:
        pass
    try:
        if spo2 is not None:
            s_o = float(spo2)
            if s_o < 90:
                flags.append("Low SpO2 (<90%) — seek immediate medical help.")
            elif s_o < 94:
                flags.append("Mildly low SpO2 — monitor, consider medical advice.")
    except:
        pass
    try:
        if glucose is not None:
            g = float(glucose)
            # assume mg/dL fast-like; simple thresholds
            if g >= 300:
                flags.append("Very high blood sugar — seek urgent care.")
            elif g >= 200:
                flags.append("High blood sugar — consult doctor soon.")
    except:
        pass

    # LLM analysis summary
    prompt = f"""
Patient vitals and notes:
- Temperature (°C): {temp_c}
- Blood Pressure (sys/dia mmHg): {bp_sys}/{bp_dia}
- Heart Rate (bpm): {hr}
- SpO2 (%): {spo2}
- Blood glucose (mg/dL): {glucose}
- Notes: {notes}

Provide a brief interpretation of these vitals in plain language, suggest immediate care steps if any flags are present, and provide safe home-care tips if values are near-normal. End with 'seek emergency care' if any serious flags.
"""
    llm_summary = generate_response(prompt, max_length=700)
    # Prepend rule-based flags if any
    flag_text = ""
    if flags:
        flag_text = "⚠️ Alert(s) detected:\n" + "\n".join(f"- {f}" for f in flags) + "\n\n"
    return flag_text + llm_summary

# ---------------- Login System ---------------- #
USERNAME = "admin"
PASSWORD = "1234"
def login(user, pwd):
    if user == USERNAME and pwd == PASSWORD:
        return gr.update(visible=False), gr.update(visible=True), "✅ Login successful! Welcome."
    else:
        return gr.update(), gr.update(), "❌ Invalid username or password."

# ---------------- UI: Gradio Blocks + CSS for styles ---------------- #
css = """
/* Glassmorphism */
#glass {
    background: rgba(255,255,255,0.12);
    backdrop-filter: blur(8px);
    border-radius: 18px;
    padding: 28px;
    text-align: center;
    box-shadow: 0 8px 30px rgba(2,6,23,0.35);
}

/* Split Screen */
#split {
    background: linear-gradient(180deg, #ffffff, #f7fbff);
    border-radius: 12px;
    padding: 10px;
    box-shadow: 0 6px 20px rgba(0,0,0,0.08);
}

/* Neon Dark */
#neon {
    background: #0b1220;
    border-radius: 14px;
    padding: 26px;
    text-align: center;
    box-shadow: 0 6px 28px rgba(0,255,230,0.06), 0 0 10px rgba(0,255,230,0.06) inset;
}
#neon-btn {
    background: linear-gradient(90deg,#00f2ff,#0066ff) !important;
    color: #00111a !important;
    border-radius: 10px;
}
#app-title { font-weight:700; }
"""

with gr.Blocks(css=css) as app:
    gr.Markdown("<div id='app-title'>🏥 Health AI – Advanced Medical Assistant (Demo)</div>")
    gr.Markdown("**Disclaimer:** This app provides informational suggestions only. Always consult a healthcare professional for diagnosis and treatment.")

    # --- Glass (default) ---
    with gr.Column(visible=True, elem_id="glass") as login_glass:
        gr.Image("https://img.icons8.com/color/96/medical-doctor.png")
        gr.Markdown("### 🔐 Welcome to Health AI")
        user_in_g = gr.Textbox(label="👤 Username", placeholder="Enter your username")
        pass_in_g = gr.Textbox(label="🔒 Password", type="password", placeholder="Enter your password")
        login_btn_g = gr.Button("🚀 Enter")
        login_msg_g = gr.Markdown("")

    # --- Split Screen ---
    with gr.Row(visible=False, elem_id="split") as login_split:
        with gr.Column(scale=1):
            gr.Image("https://img.icons8.com/color/96/medical-doctor.png")
        with gr.Column(scale=2):
            gr.Markdown("## 🏥 Health AI Login")
            user_in_s = gr.Textbox(label="👤 Username")
            pass_in_s = gr.Textbox(label="🔒 Password", type="password")
            login_btn_s = gr.Button("Login")
            login_msg_s = gr.Markdown("")

    # --- Neon Dark ---
    with gr.Column(visible=False, elem_id="neon") as login_neon:
        gr.Markdown("## 💡 Health AI Secure Login")
        user_in_n = gr.Textbox(label="👤 Username")
        pass_in_n = gr.Textbox(label="🔒 Password", type="password")
        login_btn_n = gr.Button("⚡ Unlock", elem_id="neon-btn")
        login_msg_n = gr.Markdown("")

    # Main App area (hidden until login)
    with gr.Column(visible=False) as main_app:
        # show a daily tip banner
        daily_tip = gr.Markdown(get_daily_tip)

        with gr.Tabs():
            # Disease Prediction Tab
            with gr.TabItem("Disease Prediction"):
                gr.Markdown("Enter symptoms (plain text). The assistant will give likely conditions, severity, home tips and emergency advice.")
                symptoms_input = gr.Textbox(label="Enter Symptoms", placeholder="e.g., fever, headache, cough, chest pain...", lines=4)
                predict_btn = gr.Button("Analyze Symptoms")
                prediction_output = gr.Textbox(label="Possible Conditions, Severity & Recommendations", lines=14)
                predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

            # Treatment Plans Tab
            with gr.TabItem("Treatment Plans"):
                condition_input = gr.Textbox(label="Medical Condition", placeholder="e.g., diabetes, hypertension, migraine")
                age_input = gr.Number(label="Age", value=30)
                gender_input = gr.Dropdown(choices=["Male", "Female", "Other"], label="Gender", value="Male")
                history_input = gr.Textbox(label="Medical History", placeholder="Allergies, past conditions, medications...", lines=3)
                plan_btn = gr.Button("Generate Treatment Plan")
                plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=12)
                plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

            # Natural Remedies Tab
            with gr.TabItem("Natural Remedies"):
                nr_condition = gr.Textbox(label="Condition / Symptom (e.g., fever, sore throat)", lines=1)
                nr_btn = gr.Button("Get Natural Remedies")
                nr_output = gr.Textbox(label="Home Remedies & When to See Doctor", lines=10)
                nr_btn.click(natural_remedies, inputs=nr_condition, outputs=nr_output)

            # Diet Suggestions Tab
            with gr.TabItem("Diet & Nutrition"):
                diet_condition = gr.Textbox(label="Condition (e.g., diabetes, common cold)", lines=1)
                diet_btn = gr.Button("Get Diet Suggestions")
                diet_output = gr.Textbox(label="Diet Recommendations", lines=12)
                diet_btn.click(diet_suggestions, inputs=diet_condition, outputs=diet_output)

            # Yoga / Exercise Tab
            with gr.TabItem("Yoga & Exercise"):
                ex_condition = gr.Textbox(label="Condition or Goal (e.g., back pain, stress)", lines=1)
                ex_btn = gr.Button("Get Exercises / Yoga")
                ex_output = gr.Textbox(label="Exercises/Yoga Suggestions", lines=10)
                ex_btn.click(exercise_suggestions, inputs=ex_condition, outputs=ex_output)

            # Emergency Steps Tab
            with gr.TabItem("Emergency Advice"):
                emer_text = gr.Textbox(label="Describe urgent symptom(s)", lines=3, placeholder="e.g., sudden chest pain and breathlessness")
                emer_btn = gr.Button("Get Emergency Steps")
                emer_output = gr.Textbox(label="Immediate Steps to Take", lines=10)
                emer_btn.click(emergency_steps, inputs=emer_text, outputs=emer_output)

            # Medicine Reminder Tab
            with gr.TabItem("Medicine Reminder"):
                meds_free = gr.Textbox(label="Enter medicines (one per line, e.g. 'Paracetamol - 500mg - 08:00, 14:00')", lines=6)
                meds_btn = gr.Button("Create Schedule")
                meds_out = gr.Textbox(label="Medicine Schedule (Simulation)", lines=8)
                meds_btn.click(medicine_reminder_freeform, inputs=meds_free, outputs=meds_out)

            # Wellness Tracker Tab
            with gr.TabItem("Wellness Tracker"):
                with gr.Row():
                    temp_in = gr.Number(label="Temperature (°C)", value=None)
                    hr_in = gr.Number(label="Heart Rate (bpm)", value=None)
                with gr.Row():
                    bp_sys_in = gr.Number(label="BP Systolic (mmHg)", value=None)
                    bp_dia_in = gr.Number(label="BP Diastolic (mmHg)", value=None)
                with gr.Row():
                    spo2_in = gr.Number(label="SpO2 (%)", value=None)
                    glucose_in = gr.Number(label="Blood glucose (mg/dL)", value=None)
                notes_in = gr.Textbox(label="Notes (symptoms / context)", lines=2)
                wt_btn = gr.Button("Analyze Vitals")
                wt_out = gr.Textbox(label="Vitals Analysis & Advice", lines=12)
                wt_btn.click(wellness_tracker, inputs=[temp_in, bp_sys_in, bp_dia_in, hr_in, spo2_in, glucose_in, notes_in], outputs=wt_out)

            # Chatbot Tab
            with gr.TabItem("Health Chatbot"):
                chat_input = gr.Textbox(label="Ask a health question", lines=3, placeholder="e.g., How can I reduce fever naturally?")
                chat_btn = gr.Button("Ask")
                chat_output = gr.Textbox(label="Assistant's Reply", lines=10)
                chat_btn.click(health_chat, inputs=chat_input, outputs=chat_output)

    # --- Logic to switch login styles dynamically ---
    def switch_style(style):
        return (
            gr.update(visible=(style=="Glassmorphism")),
            gr.update(visible=(style=="Split-Screen")),
            gr.update(visible=(style=="Neon Dark"))
        )
    style_selector.change(switch_style, style_selector, [login_glass, login_split, login_neon])

    # Login button hooks (each style uses the same login function)
    login_btn_g.click(login, [user_in_g, pass_in_g], [login_glass, main_app, login_msg_g])
    login_btn_s.click(login, [user_in_s, pass_in_s], [login_split, main_app, login_msg_s])
    login_btn_n.click(login, [user_in_n, pass_in_n], [login_neon, main_app, login_msg_n])

# Launch app
app.launch(share=True)